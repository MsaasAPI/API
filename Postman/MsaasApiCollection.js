{"id":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","name":"Msaas API","description":null,"auth":null,"events":null,"variables":null,"order":["13a2482e-1d01-4b04-8c48-ac4b1dbe68c0"],"folders_order":[],"folders":[],"requests":[{"id":"13a2482e-1d01-4b04-8c48-ac4b1dbe68c0","name":"000 Environment Initialization","url":"https:\/\/raw.githubusercontent.com\/kjur\/jsrsasign\/master\/jsrsasign-all-min.js","description":"Run utility scripts and store it in global variable for supplemental use.","data":[],"dataMode":"params","headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"prerequest","script":{"id":"95a61868-45e6-4b53-985f-5f2f7481bbbf","type":"text\/javascript","exec":["\/***** README *****\/","\/*"," * - WARNING: THIS SCRIPT WILL ERASE ALL GLOBAL AND ENVIRONMENT VARIABLES."," * - The scripts in Pre-request Script and Tests tabs populate all necessary global and environmental variables assuming the user just installed Postman application and start out fresh. After running this script, the user shall be equipped to run any other individual Scenario or entire Demo folder via Runner."," * - Expiration of Bearer Token is fixed at one hour, while that of JWT is configurable, but defaulted at ten minutes for security consideration."," * - Implementation High Levels"," *   a. Assign essential variables"," *   b. Get and compile JsRsaSign scripts"," *   c. Synthesize JWT offline"," *   d. Request Bearer Token"," *   e. Create a new case"," *   f. Get the newly created case","*\/ ","","","\/***** Globals & Environment Variables Cleansing *****\/","pm.globals.clear(); \/\/ Wipe out global variables","pm.environment.clear(); \/\/ Wipe out environment variables","","","\/***** USER CREDENTIALS *****\/","\/\/ Partner Cert Thumbprint. See https:\/\/docs.microsoft.com\/en-us\/dotnet\/framework\/wcf\/feature-details\/how-to-retrieve-the-thumbprint-of-a-certificate","pm.environment.set(\"020_ThumbPrint\", \"\");","\/\/ Partner Client\/App ID","pm.environment.set(\"020_ClientId\", \"\");","\/\/ Partner Tenant ID","pm.environment.set(\"020_TenantId\", \"\");","\/\/ Partner PEM private key string","pm.environment.set(\"020_PrivateKey\", \"\");","\/\/ Support Area Path (SAP) to route cases to Azure Stack team","pm.environment.set(\"100_SupportAreaPath\", \"\");","","","\/***** OTHER SYSTEM PARAMETERS *****\/","pm.environment.set(\"020_GrantType\", \"client_credentials\");","pm.environment.set(\"020_Resource\", \"https:\/\/api-ppe.support.microsoft.com\");","pm.environment.set(\"020_ClientAssertionType\", \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\");","pm.environment.set(\"100s_200s_BaseUrl\", \"https:\/\/api-ppe.support.microsoft.com\/v1\/cases\");","","","\/***** REQUEST FAILURE HANDLING *****\/","pm.environment.set(\"100_RetryCreateCase\", \"0\");","pm.environment.set(\"200_RetryGetCase\", \"0\");","pm.environment.set(\"110_RetryAssignAgent\", \"0\");","pm.environment.set(\"120_RetryCreateNote\", \"0\");","pm.environment.set(\"xxx_RetryClose\", \"0\");","","\/\/ General request failure handling utility function. Serialized and stored as global variable for later use if needed","postman.setGlobalVariable(\"handleFailedRequest\", (retryType, requestToRetry) => {","    let retry = parseInt(pm.environment.get(retryType));","","    if (pm.response.code == 401) { \/\/ For \"Not Authorized\" scenario","        postman.setNextRequest(\"Request Token\");","    } else if (retry < 3) { \/\/ For all other failed scenarios","        setTimeout(function(){}, 1000);","        pm.environment.set(retryType, retry + 1);","        postman.setNextRequest(requestToRetry);","    }","});","","","\/***** VALIDATE ACCESS TOKEN AND UPDATE IF NEEDED *****\/","postman.setGlobalVariable(\"validateAndUpdateToken\", (forceUpdate) => {","    let bearerToken = pm.environment.get(\"100s_200s_BearerToken\");","    ","    if(!forceUpdate){ \/\/ not forcing token update","        if(bearerToken){ \/\/ Bearer Token is present","            let jwtClaims = new Buffer(bearerToken.split(\".\")[1], \"base64\").toString('ascii'); \/\/ cell 0 contains header, cell 1 contains claims, and cell 2 contains signature ","            let jwtExpTimestamp = JSON.parse(jwtClaims).exp;","            let now = new Date().getTime() \/ 1000 | 0;","            if(jwtExpTimestamp - now > 10) \/\/ token expiration is more than 10 secs out from now","                return; \/\/ Skip token-update script below if not forcing token update, token is present, and not expired","        }","    }","    ","    \/\/ Compile JsRsaSign script just retrieved from Github","    let navigator = {}; \/\/fake a navigator object for the lib","    let window = {}; \/\/fake a window object for the lib","    let now = new Date().getTime() \/ 1000 | 0;","    eval(pm.globals.get(\"020_JsRsaSign\"));","    ","    \/\/ Prepare JWT elements offline","    let privateKey = pm.environment.get(\"020_PrivateKey\"); \/\/ Private Key from pem file","    let tenantId = pm.environment.get(\"020_TenantId\");","    let clientId = pm.environment.get(\"020_ClientId\");","    let authorizationUrl = \"https:\/\/login.microsoftonline.com\/\" + tenantId + \"\/oauth2\/token\";","    let baseUrl = pm.environment.get(\"100s_200s_BaseUrl\");","    let x5t = Buffer(pm.environment.get(\"020_ThumbPrint\"), \"hex\").toString(\"base64\").replace(\/=\/g, '').replace(\/\\+\/g, '-').replace(\/\\\/\/g, '_'); \/\/ Thumbprint in Base64URL format","    ","    \/\/ Synthesize JWT offline","    let header = { ","        alg: \"RS256\", ","        typ: \"JWT\", ","        x5t: x5t","        };","    let payload = { ","        aud: authorizationUrl, \/\/ Authorization Server end point","        nbf: now, \/\/ Right now","        exp: now + 600, \/\/ 10 mins from now. Can be longer, but not advisible for security concern","        jti: require(\"uuid\").v4(), \/\/ Random GUID","        iss: clientId, \/\/ App ID","        sub: clientId \/\/ App ID","        };","    let jwt = KJUR.jws.JWS.sign(\"RS256\", header, payload, privateKey);","","    \/\/ Prepare specs for requesting Bearer Token","    const tokenRequestSpecs = {","      url: authorizationUrl,","      method: \"POST\",","        header: \"Content-Type:multipart\/form-data\",","        body: {","            mode: \"formdata\",","            formdata: [","                {key: \"grant_type\", value: pm.environment.get(\"020_GrantType\")},","                {key: \"resource\", value: pm.environment.get(\"020_Resource\")},","                {key: \"client_assertion_type\", value: pm.environment.get(\"020_ClientAssertionType\")},","                {key: \"client_assertion\", value: jwt}","            ]","        }","    };","    ","    \/\/ Makes POST: request Bearer Token","    pm.sendRequest(tokenRequestSpecs, function (err, res) {","        if(err){","            console.log(err);","        } else {","            \/\/ Store Bearer Token as global variable","            pm.environment.set(\"100s_200s_BearerToken\", res.json().access_token);","        }","    });","});",""]}},{"listen":"test","script":{"id":"13956027-41da-4bed-9e56-2bd5ed315697","type":"text\/javascript","exec":["pm.globals.set(\"020_JsRsaSign\", pm.response.text()); \/\/ Store JsRsaSign script as Global variable","eval(pm.globals.get(\"validateAndUpdateToken\"))(); \/\/ compile and execute validateAndUpdateToken()","","\/\/ Draft \"POST Case\" payload","let now = new Date().getTime() \/ 1000 | 0;","let sap = pm.environment.get(\"100_SupportAreaPath\");","let caseJson = {","  \"SupportAreaPath\": sap,","  \"Severity\": \"2\",","  \"CreationChannel\": \"Web\",","  \"Title\": \"Test \" + now,","  \"IssueDescription\": \"This is a description of the issue.\",","  \"SupportCountry\": \"US\",","  \"SupportLanguage\": \"en-US\",","  \"EntitlementInformation\": {","    \"EntitlementId\": \"U291cmNlOkZyZWUsRnJlZUlkOjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCxMb2NhbGU6ZW4tdXMs\"","  },","  \"Customers\": [","    {","      \"CustomerId\": \"Unknown\",","      \"CustomerIdSource\": \"Unknown\",","      \"Contacts\": [","        {","            \"FirstName\": \"John\",","            \"LastName\": \"Smith\",","            \"Email\": \"JohnSmith@invalidCustomerEmail.com\",","            \"Phone\": \"+123-456-7890\",","            \"PreferredContactChannel\": \"Phone\",","            \"IsPrimaryContact\": true","        }","      ]","    }","  ],","  \"PartnerCaseReferences\": [","    {","        \"PartnerCaseId\": \"Test \" + now,","        \"PartnerCaseState\": \"Open\",","        \"PartnerAgentInformation\": {","            \"FirstName\": \"Jane\",","            \"LastName\": \"Doe\",","            \"Email\": \"JaneDoe@invalidPartnerEmail.com\",","            \"Phone\": \"+888-999-0000\"","        }","    }","  ]","};"]}}],"folder":null,"preRequestScript":"\/***** README *****\/\n\/*\n * - WARNING: THIS SCRIPT WILL ERASE ALL GLOBAL AND ENVIRONMENT VARIABLES.\n * - The scripts in Pre-request Script and Tests tabs populate all necessary global and environmental variables assuming the user just installed Postman application and start out fresh. After running this script, the user shall be equipped to run any other individual Scenario or entire Demo folder via Runner.\n * - Expiration of Bearer Token is fixed at one hour, while that of JWT is configurable, but defaulted at ten minutes for security consideration.\n * - Implementation High Levels\n *   a. Assign essential variables\n *   b. Get and compile JsRsaSign scripts\n *   c. Synthesize JWT offline\n *   d. Request Bearer Token\n *   e. Create a new case\n *   f. Get the newly created case\n*\/ \n\n\n\/***** Globals & Environment Variables Cleansing *****\/\npm.globals.clear(); \/\/ Wipe out global variables\npm.environment.clear(); \/\/ Wipe out environment variables\n\n\n\/***** USER CREDENTIALS *****\/\n\/\/ Partner Cert Thumbprint. See https:\/\/docs.microsoft.com\/en-us\/dotnet\/framework\/wcf\/feature-details\/how-to-retrieve-the-thumbprint-of-a-certificate\npm.environment.set(\"020_ThumbPrint\", \"\");\n\/\/ Partner Client\/App ID\npm.environment.set(\"020_ClientId\", \"\");\n\/\/ Partner Tenant ID\npm.environment.set(\"020_TenantId\", \"\");\n\/\/ Partner PEM private key string\npm.environment.set(\"020_PrivateKey\", \"\");\n\/\/ Support Area Path (SAP) to route cases to Azure Stack team\npm.environment.set(\"100_SupportAreaPath\", \"\");\n\n\n\/***** OTHER SYSTEM PARAMETERS *****\/\npm.environment.set(\"020_GrantType\", \"client_credentials\");\npm.environment.set(\"020_Resource\", \"https:\/\/api-ppe.support.microsoft.com\");\npm.environment.set(\"020_ClientAssertionType\", \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\");\npm.environment.set(\"100s_200s_BaseUrl\", \"https:\/\/api-ppe.support.microsoft.com\/v1\/cases\");\n\n\n\/***** REQUEST FAILURE HANDLING *****\/\npm.environment.set(\"100_RetryCreateCase\", \"0\");\npm.environment.set(\"200_RetryGetCase\", \"0\");\npm.environment.set(\"110_RetryAssignAgent\", \"0\");\npm.environment.set(\"120_RetryCreateNote\", \"0\");\npm.environment.set(\"xxx_RetryClose\", \"0\");\n\n\/\/ General request failure handling utility function. Serialized and stored as global variable for later use if needed\npostman.setGlobalVariable(\"handleFailedRequest\", (retryType, requestToRetry) => {\n    let retry = parseInt(pm.environment.get(retryType));\n\n    if (pm.response.code == 401) { \/\/ For \"Not Authorized\" scenario\n        postman.setNextRequest(\"Request Token\");\n    } else if (retry < 3) { \/\/ For all other failed scenarios\n        setTimeout(function(){}, 1000);\n        pm.environment.set(retryType, retry + 1);\n        postman.setNextRequest(requestToRetry);\n    }\n});\n\n\n\/***** VALIDATE ACCESS TOKEN AND UPDATE IF NEEDED *****\/\npostman.setGlobalVariable(\"validateAndUpdateToken\", (forceUpdate) => {\n    let bearerToken = pm.environment.get(\"100s_200s_BearerToken\");\n    \n    if(!forceUpdate){ \/\/ not forcing token update\n        if(bearerToken){ \/\/ Bearer Token is present\n            let jwtClaims = new Buffer(bearerToken.split(\".\")[1], \"base64\").toString('ascii'); \/\/ cell 0 contains header, cell 1 contains claims, and cell 2 contains signature \n            let jwtExpTimestamp = JSON.parse(jwtClaims).exp;\n            let now = new Date().getTime() \/ 1000 | 0;\n            if(jwtExpTimestamp - now > 10) \/\/ token expiration is more than 10 secs out from now\n                return; \/\/ Skip token-update script below if not forcing token update, token is present, and not expired\n        }\n    }\n    \n    \/\/ Compile JsRsaSign script just retrieved from Github\n    let navigator = {}; \/\/fake a navigator object for the lib\n    let window = {}; \/\/fake a window object for the lib\n    let now = new Date().getTime() \/ 1000 | 0;\n    eval(pm.globals.get(\"020_JsRsaSign\"));\n    \n    \/\/ Prepare JWT elements offline\n    let privateKey = pm.environment.get(\"020_PrivateKey\"); \/\/ Private Key from pem file\n    let tenantId = pm.environment.get(\"020_TenantId\");\n    let clientId = pm.environment.get(\"020_ClientId\");\n    let authorizationUrl = \"https:\/\/login.microsoftonline.com\/\" + tenantId + \"\/oauth2\/token\";\n    let baseUrl = pm.environment.get(\"100s_200s_BaseUrl\");\n    let x5t = Buffer(pm.environment.get(\"020_ThumbPrint\"), \"hex\").toString(\"base64\").replace(\/=\/g, '').replace(\/\\+\/g, '-').replace(\/\\\/\/g, '_'); \/\/ Thumbprint in Base64URL format\n    \n    \/\/ Synthesize JWT offline\n    let header = { \n        alg: \"RS256\", \n        typ: \"JWT\", \n        x5t: x5t\n        };\n    let payload = { \n        aud: authorizationUrl, \/\/ Authorization Server end point\n        nbf: now, \/\/ Right now\n        exp: now + 600, \/\/ 10 mins from now. Can be longer, but not advisible for security concern\n        jti: require(\"uuid\").v4(), \/\/ Random GUID\n        iss: clientId, \/\/ App ID\n        sub: clientId \/\/ App ID\n        };\n    let jwt = KJUR.jws.JWS.sign(\"RS256\", header, payload, privateKey);\n\n    \/\/ Prepare specs for requesting Bearer Token\n    const tokenRequestSpecs = {\n      url: authorizationUrl,\n      method: \"POST\",\n        header: \"Content-Type:multipart\/form-data\",\n        body: {\n            mode: \"formdata\",\n            formdata: [\n                {key: \"grant_type\", value: pm.environment.get(\"020_GrantType\")},\n                {key: \"resource\", value: pm.environment.get(\"020_Resource\")},\n                {key: \"client_assertion_type\", value: pm.environment.get(\"020_ClientAssertionType\")},\n                {key: \"client_assertion\", value: jwt}\n            ]\n        }\n    };\n    \n    \/\/ Makes POST: request Bearer Token\n    pm.sendRequest(tokenRequestSpecs, function (err, res) {\n        if(err){\n            console.log(err);\n        } else {\n            \/\/ Store Bearer Token as global variable\n            pm.environment.set(\"100s_200s_BearerToken\", res.json().access_token);\n        }\n    });\n});\n","tests":"pm.globals.set(\"020_JsRsaSign\", pm.response.text()); \/\/ Store JsRsaSign script as Global variable\neval(pm.globals.get(\"validateAndUpdateToken\"))(); \/\/ compile and execute validateAndUpdateToken()\n\n\/\/ Draft \"POST Case\" payload\nlet now = new Date().getTime() \/ 1000 | 0;\nlet sap = pm.environment.get(\"100_SupportAreaPath\");\nlet caseJson = {\n  \"SupportAreaPath\": sap,\n  \"Severity\": \"2\",\n  \"CreationChannel\": \"Web\",\n  \"Title\": \"Test \" + now,\n  \"IssueDescription\": \"This is a description of the issue.\",\n  \"SupportCountry\": \"US\",\n  \"SupportLanguage\": \"en-US\",\n  \"EntitlementInformation\": {\n    \"EntitlementId\": \"U291cmNlOkZyZWUsRnJlZUlkOjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCxMb2NhbGU6ZW4tdXMs\"\n  },\n  \"Customers\": [\n    {\n      \"CustomerId\": \"Unknown\",\n      \"CustomerIdSource\": \"Unknown\",\n      \"Contacts\": [\n        {\n            \"FirstName\": \"John\",\n            \"LastName\": \"Smith\",\n            \"Email\": \"JohnSmith@invalidCustomerEmail.com\",\n            \"Phone\": \"+123-456-7890\",\n            \"PreferredContactChannel\": \"Phone\",\n            \"IsPrimaryContact\": true\n        }\n      ]\n    }\n  ],\n  \"PartnerCaseReferences\": [\n    {\n        \"PartnerCaseId\": \"Test \" + now,\n        \"PartnerCaseState\": \"Open\",\n        \"PartnerAgentInformation\": {\n            \"FirstName\": \"Jane\",\n            \"LastName\": \"Doe\",\n            \"Email\": \"JaneDoe@invalidPartnerEmail.com\",\n            \"Phone\": \"+888-999-0000\"\n        }\n    }\n  ]\n};","currentHelper":null,"helperAttributes":null,"collectionId":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","headers":"","pathVariables":[]}]}
