{"id":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","name":"Msaas API","description":null,"auth":null,"events":null,"variables":null,"order":["13a2482e-1d01-4b04-8c48-ac4b1dbe68c0"],"folders_order":["3d1eadea-4a32-47ee-b8d9-24545112f994"],"folders":[{"id":"3d1eadea-4a32-47ee-b8d9-24545112f994","name":"Partner Scenarios","description":"Common requests the partners utilize.","auth":{"type":"oauth2","oauth2":[{"key":"addTokenTo","value":"header"}]},"events":null,"collection":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","folder":null,"order":["579a8c28-9ed4-4a03-8266-b06a6b9b17a4"],"folders_order":[],"collectionId":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","folderId":"3d1eadea-4a32-47ee-b8d9-24545112f994"}],"requests":[{"id":"13a2482e-1d01-4b04-8c48-ac4b1dbe68c0","name":"000 Environment Initialization","url":"https:\/\/raw.githubusercontent.com\/kjur\/jsrsasign\/master\/jsrsasign-all-min.js","description":"Run utility scripts and store it in global variable for supplemental use.","data":[],"dataMode":"params","headerData":[],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"prerequest","script":{"id":"b79d51f9-6e60-4f76-9f1a-6fb53fe722f3","type":"text\/javascript","exec":["\/***** README *****\/","\/*"," * - WARNING: THIS SCRIPT WILL ERASE ALL GLOBAL AND ENVIRONMENT VARIABLES."," * - The scripts in Pre-request Script and Tests tabs populate all necessary global and environmental variables assuming the user just installed Postman application and start out fresh. After running this script, the user shall be equipped to run any other individual Scenario or entire Demo folder via Runner."," * - Expiration of Bearer Token is fixed at one hour, while that of JWT is configurable, but defaulted at ten minutes for security consideration."," * - Implementation High Levels"," *   a. Assign essential variables (including reusable functions to validate token and handle failed requests)"," *   b. Get and compile JsRsaSign scripts"," *   c. Synthesize JWT offline"," *   d. Request Bearer Token"," *   e. Create a new case"," *   f. Get the newly created case","*\/ ","","","\/***** Globals & Environment Variables Cleansing *****\/","pm.globals.clear(); \/\/ Wipe out global variables","pm.environment.clear(); \/\/ Wipe out environment variables","","","\/***** USER CREDENTIALS *****\/","\/\/ Partner Cert Thumbprint. See https:\/\/docs.microsoft.com\/en-us\/dotnet\/framework\/wcf\/feature-details\/how-to-retrieve-the-thumbprint-of-a-certificate","pm.environment.set(\"020_ThumbPrint\", \"\");","\/\/ Partner Client\/App ID","pm.environment.set(\"020_ClientId\", \"\");","\/\/ Partner Tenant ID","pm.environment.set(\"020_TenantId\", \"\");","\/\/ Partner PEM private key string","pm.environment.set(\"020_PrivateKey\", \"\");","\/\/ Support Area Path (SAP) to route cases to Azure Stack team","pm.environment.set(\"100_SupportAreaPath\", \"\");","","","\/***** OTHER SYSTEM PARAMETERS *****\/","pm.environment.set(\"020_GrantType\", \"client_credentials\");","pm.environment.set(\"020_Resource\", \"https:\/\/api-ppe.support.microsoft.com\");","pm.environment.set(\"020_ClientAssertionType\", \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\");","pm.environment.set(\"100s_200s_BaseUrl\", \"https:\/\/api-ppe.support.microsoft.com\/v1\/cases\");","","","\/***** REQUEST FAILURE HANDLING *****\/","pm.environment.set(\"100_RetryCreateCase\", \"0\");","pm.environment.set(\"200_RetryGetCase\", \"0\");","pm.environment.set(\"110_RetryAssignAgent\", \"0\");","pm.environment.set(\"120_RetryCreateNote\", \"0\");","pm.environment.set(\"xxx_RetryClose\", \"0\");","","\/\/ General request failure handling utility function. Serialized and stored as global variable for later use if needed","postman.setGlobalVariable(\"handleFailedRequest\", (retryType, requestToRetry) => {","    let retry = parseInt(pm.environment.get(retryType));","","    if (pm.response.code == 401) { \/\/ For \"Not Authorized\" scenario","        eval(pm.globals.get(\"validateAndUpdateToken\"))(true); \/\/ forcibly request a new token regardless if one is present.","        console.log(\"Access Token was just updated. Please try again if intended request did not succeed\")","    } else if (retry < 3) { \/\/ For all other failed scenarios","        setTimeout(function(){}, 1000);","        pm.environment.set(retryType, retry + 1);","        postman.setNextRequest(requestToRetry);","    }","});","","","\/***** VALIDATE ACCESS TOKEN AND UPDATE IF NEEDED *****\/","postman.setGlobalVariable(\"validateAndUpdateToken\", (forceUpdate) => {","    let bearerToken = pm.environment.get(\"100s_200s_BearerToken\");","","    if(!forceUpdate){ \/\/ not forcing token update","        if(bearerToken){ \/\/ Bearer Token is present","            let jwtClaims = new Buffer(bearerToken.split(\".\")[1], \"base64\").toString('ascii'); \/\/ cell 0 contains header, cell 1 contains claims, and cell 2 contains signature ","            let jwtExpTimestamp = JSON.parse(jwtClaims).exp;","            let now = new Date().getTime() \/ 1000 | 0;","            if(jwtExpTimestamp - now > 10) \/\/ token expiration is more than 10 secs out from now","                return; \/\/ Skip token-update script below if not forcing token update, token is present, and not expired","        }","    }","    ","    \/\/ Compile JsRsaSign script just retrieved from Github","    let navigator = {}; \/\/fake a navigator object for the lib","    let window = {}; \/\/fake a window object for the lib","    let now = new Date().getTime() \/ 1000 | 0;","    eval(pm.globals.get(\"020_JsRsaSign\"));","    ","    \/\/ Prepare JWT elements offline","    let privateKey = pm.environment.get(\"020_PrivateKey\"); \/\/ Private Key from pem file","    let tenantId = pm.environment.get(\"020_TenantId\");","    let clientId = pm.environment.get(\"020_ClientId\");","    let authorizationUrl = \"https:\/\/login.microsoftonline.com\/\" + tenantId + \"\/oauth2\/token\";","    let baseUrl = pm.environment.get(\"100s_200s_BaseUrl\");","    let x5t = Buffer(pm.environment.get(\"020_ThumbPrint\"), \"hex\").toString(\"base64\").replace(\/=\/g, '').replace(\/\\+\/g, '-').replace(\/\\\/\/g, '_'); \/\/ Thumbprint in Base64URL format","    ","    \/\/ Synthesize JWT offline","    let header = { ","        alg: \"RS256\", ","        typ: \"JWT\", ","        x5t: x5t","        };","    let payload = { ","        aud: authorizationUrl, \/\/ Authorization Server end point","        nbf: now, \/\/ Right now","        exp: now + 600, \/\/ 10 mins from now. Can be longer, but not advisible for security concern","        jti: require(\"uuid\").v4(), \/\/ Random GUID","        iss: clientId, \/\/ App ID","        sub: clientId \/\/ App ID","        };","    let jwt = KJUR.jws.JWS.sign(\"RS256\", header, payload, privateKey);","","    \/\/ Prepare specs for requesting Bearer Token","    const tokenRequestSpecs = {","      url: authorizationUrl,","      method: \"POST\",","        header: \"Content-Type:multipart\/form-data\",","        body: {","            mode: \"formdata\",","            formdata: [","                {key: \"grant_type\", value: pm.environment.get(\"020_GrantType\")},","                {key: \"resource\", value: pm.environment.get(\"020_Resource\")},","                {key: \"client_assertion_type\", value: pm.environment.get(\"020_ClientAssertionType\")},","                {key: \"client_assertion\", value: jwt}","            ]","        }","    };","    ","    \/\/ Makes POST: request Bearer Token","    pm.sendRequest(tokenRequestSpecs, function (err, res) {","        if(err){","            console.log(err);","        } else {","            \/\/ Store Bearer Token as global variable","            pm.environment.set(\"100s_200s_BearerToken\", res.json().access_token);","        }","    });","});",""]}},{"listen":"test","script":{"id":"70f851c3-c242-480c-92c6-98f732c653ba","type":"text\/javascript","exec":["\/***** SYNTHESIZE JWT AND REQUEST ACCESS TOKEN *****\/","pm.globals.set(\"020_JsRsaSign\", pm.response.text()); \/\/ Store JsRsaSign script as Global variable","eval(pm.globals.get(\"validateAndUpdateToken\"))(true); \/\/ compile and execute validateAndUpdateToken() to forcefully getting new token regardless what token is at hand","","","\/***** CREATE AND GET NEW CASE *****\/","\/\/ Draft \"POST Case\" payload","let now = new Date().getTime() \/ 1000 | 0;","let sap = pm.environment.get(\"100_SupportAreaPath\");","let delay = 5000; \/\/ General time delay before making next request","let caseJson = {","  \"SupportAreaPath\": sap,","  \"Severity\": \"2\",","  \"CreationChannel\": \"Web\",","  \"Title\": \"Test \" + now,","  \"IssueDescription\": \"This is a description of the issue.\",","  \"SupportCountry\": \"US\",","  \"SupportLanguage\": \"en-US\",","  \"EntitlementInformation\": {","    \"EntitlementId\": \"U291cmNlOkZyZWUsRnJlZUlkOjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCxMb2NhbGU6ZW4tdXMs\"","  },","  \"Customers\": [","    {","      \"CustomerId\": \"Unknown\",","      \"CustomerIdSource\": \"Unknown\",","      \"Contacts\": [","        {","            \"FirstName\": \"John\",","            \"LastName\": \"Smith\",","            \"Email\": \"JohnSmith@invalidCustomerEmail.com\",","            \"Phone\": \"+123-456-7890\",","            \"PreferredContactChannel\": \"Phone\",","            \"IsPrimaryContact\": true","        }","      ]","    }","  ],","  \"PartnerCaseReferences\": [","    {","        \"PartnerCaseId\": \"Test \" + now,","        \"PartnerCaseState\": \"Open\",","        \"PartnerAgentInformation\": {","            \"FirstName\": \"Jane\",","            \"LastName\": \"Doe\",","            \"Email\": \"JaneDoe@invalidPartnerEmail.com\",","            \"Phone\": \"+888-999-0000\"","        }","    }","  ]","};","","setTimeout(function(){","    let baseUrl = pm.environment.get(\"100s_200s_BaseUrl\");","    let bearerToken = pm.environment.get(\"100s_200s_BearerToken\");","    ","    \/\/ Prepare specs for creating a new case","    const postRequestSpecs = {","          url: baseUrl,","          method: \"POST\",","          header: {","              \"Content-Type\": \"application\/json\", ","              \"Authorization\": \"Bearer \" + bearerToken","          },","          body: {","            mode: \"raw\",","            raw: JSON.stringify(caseJson)","          }","        };","    ","    \/\/ Makes POST: creates new case","    pm.sendRequest(postRequestSpecs, function (err, res) {","            if(err){","                console.log(err);","            } else if (res.code != 201) { \/\/ No error, but request not successful","                console.log(res);","            } else { \/\/ Request Success","                let caseNumber = res.json().CaseNumber;","                pm.environment.set(\"100s_200s_CaseNumber\", caseNumber);","                setTimeout(function(){","                    \/\/ Makes GET: acquires casejson of the newly created case","                    pm.sendRequest({","                        url: baseUrl + \"\/\" + caseNumber,","                        method: \"GET\",","                        header: \"Authorization:Bearer \" + bearerToken","                    });","                }, delay); \/\/ Allocate time buffer to allow remote server to complete new case creation before our GET request","            }","        });","}, delay); \/\/ Allocate time buffer to allow Postman to obtain access token before our next POST request (create case)","",""]}}],"folder":null,"preRequestScript":"\/***** README *****\/\n\/*\n * - WARNING: THIS SCRIPT WILL ERASE ALL GLOBAL AND ENVIRONMENT VARIABLES.\n * - The scripts in Pre-request Script and Tests tabs populate all necessary global and environmental variables assuming the user just installed Postman application and start out fresh. After running this script, the user shall be equipped to run any other individual Scenario or entire Demo folder via Runner.\n * - Expiration of Bearer Token is fixed at one hour, while that of JWT is configurable, but defaulted at ten minutes for security consideration.\n * - Implementation High Levels\n *   a. Assign essential variables (including reusable functions to validate token and handle failed requests)\n *   b. Get and compile JsRsaSign scripts\n *   c. Synthesize JWT offline\n *   d. Request Bearer Token\n *   e. Create a new case\n *   f. Get the newly created case\n*\/ \n\n\n\/***** Globals & Environment Variables Cleansing *****\/\npm.globals.clear(); \/\/ Wipe out global variables\npm.environment.clear(); \/\/ Wipe out environment variables\n\n\n\/***** USER CREDENTIALS *****\/\n\/\/ Partner Cert Thumbprint. See https:\/\/docs.microsoft.com\/en-us\/dotnet\/framework\/wcf\/feature-details\/how-to-retrieve-the-thumbprint-of-a-certificate\npm.environment.set(\"020_ThumbPrint\", \"\");\n\/\/ Partner Client\/App ID\npm.environment.set(\"020_ClientId\", \"\");\n\/\/ Partner Tenant ID\npm.environment.set(\"020_TenantId\", \"\");\n\/\/ Partner PEM private key string\npm.environment.set(\"020_PrivateKey\", \"\");\n\/\/ Support Area Path (SAP) to route cases to Azure Stack team\npm.environment.set(\"100_SupportAreaPath\", \"\");\n\n\n\/***** OTHER SYSTEM PARAMETERS *****\/\npm.environment.set(\"020_GrantType\", \"client_credentials\");\npm.environment.set(\"020_Resource\", \"https:\/\/api-ppe.support.microsoft.com\");\npm.environment.set(\"020_ClientAssertionType\", \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\");\npm.environment.set(\"100s_200s_BaseUrl\", \"https:\/\/api-ppe.support.microsoft.com\/v1\/cases\");\n\n\n\/***** REQUEST FAILURE HANDLING *****\/\npm.environment.set(\"100_RetryCreateCase\", \"0\");\npm.environment.set(\"200_RetryGetCase\", \"0\");\npm.environment.set(\"110_RetryAssignAgent\", \"0\");\npm.environment.set(\"120_RetryCreateNote\", \"0\");\npm.environment.set(\"xxx_RetryClose\", \"0\");\n\n\/\/ General request failure handling utility function. Serialized and stored as global variable for later use if needed\npostman.setGlobalVariable(\"handleFailedRequest\", (retryType, requestToRetry) => {\n    let retry = parseInt(pm.environment.get(retryType));\n\n    if (pm.response.code == 401) { \/\/ For \"Not Authorized\" scenario\n        eval(pm.globals.get(\"validateAndUpdateToken\"))(true); \/\/ forcibly request a new token regardless if one is present.\n        console.log(\"Access Token was just updated. Please try again if intended request did not succeed\")\n    } else if (retry < 3) { \/\/ For all other failed scenarios\n        setTimeout(function(){}, 1000);\n        pm.environment.set(retryType, retry + 1);\n        postman.setNextRequest(requestToRetry);\n    }\n});\n\n\n\/***** VALIDATE ACCESS TOKEN AND UPDATE IF NEEDED *****\/\npostman.setGlobalVariable(\"validateAndUpdateToken\", (forceUpdate) => {\n    let bearerToken = pm.environment.get(\"100s_200s_BearerToken\");\n\n    if(!forceUpdate){ \/\/ not forcing token update\n        if(bearerToken){ \/\/ Bearer Token is present\n            let jwtClaims = new Buffer(bearerToken.split(\".\")[1], \"base64\").toString('ascii'); \/\/ cell 0 contains header, cell 1 contains claims, and cell 2 contains signature \n            let jwtExpTimestamp = JSON.parse(jwtClaims).exp;\n            let now = new Date().getTime() \/ 1000 | 0;\n            if(jwtExpTimestamp - now > 10) \/\/ token expiration is more than 10 secs out from now\n                return; \/\/ Skip token-update script below if not forcing token update, token is present, and not expired\n        }\n    }\n    \n    \/\/ Compile JsRsaSign script just retrieved from Github\n    let navigator = {}; \/\/fake a navigator object for the lib\n    let window = {}; \/\/fake a window object for the lib\n    let now = new Date().getTime() \/ 1000 | 0;\n    eval(pm.globals.get(\"020_JsRsaSign\"));\n    \n    \/\/ Prepare JWT elements offline\n    let privateKey = pm.environment.get(\"020_PrivateKey\"); \/\/ Private Key from pem file\n    let tenantId = pm.environment.get(\"020_TenantId\");\n    let clientId = pm.environment.get(\"020_ClientId\");\n    let authorizationUrl = \"https:\/\/login.microsoftonline.com\/\" + tenantId + \"\/oauth2\/token\";\n    let baseUrl = pm.environment.get(\"100s_200s_BaseUrl\");\n    let x5t = Buffer(pm.environment.get(\"020_ThumbPrint\"), \"hex\").toString(\"base64\").replace(\/=\/g, '').replace(\/\\+\/g, '-').replace(\/\\\/\/g, '_'); \/\/ Thumbprint in Base64URL format\n    \n    \/\/ Synthesize JWT offline\n    let header = { \n        alg: \"RS256\", \n        typ: \"JWT\", \n        x5t: x5t\n        };\n    let payload = { \n        aud: authorizationUrl, \/\/ Authorization Server end point\n        nbf: now, \/\/ Right now\n        exp: now + 600, \/\/ 10 mins from now. Can be longer, but not advisible for security concern\n        jti: require(\"uuid\").v4(), \/\/ Random GUID\n        iss: clientId, \/\/ App ID\n        sub: clientId \/\/ App ID\n        };\n    let jwt = KJUR.jws.JWS.sign(\"RS256\", header, payload, privateKey);\n\n    \/\/ Prepare specs for requesting Bearer Token\n    const tokenRequestSpecs = {\n      url: authorizationUrl,\n      method: \"POST\",\n        header: \"Content-Type:multipart\/form-data\",\n        body: {\n            mode: \"formdata\",\n            formdata: [\n                {key: \"grant_type\", value: pm.environment.get(\"020_GrantType\")},\n                {key: \"resource\", value: pm.environment.get(\"020_Resource\")},\n                {key: \"client_assertion_type\", value: pm.environment.get(\"020_ClientAssertionType\")},\n                {key: \"client_assertion\", value: jwt}\n            ]\n        }\n    };\n    \n    \/\/ Makes POST: request Bearer Token\n    pm.sendRequest(tokenRequestSpecs, function (err, res) {\n        if(err){\n            console.log(err);\n        } else {\n            \/\/ Store Bearer Token as global variable\n            pm.environment.set(\"100s_200s_BearerToken\", res.json().access_token);\n        }\n    });\n});\n","tests":"\/***** SYNTHESIZE JWT AND REQUEST ACCESS TOKEN *****\/\npm.globals.set(\"020_JsRsaSign\", pm.response.text()); \/\/ Store JsRsaSign script as Global variable\neval(pm.globals.get(\"validateAndUpdateToken\"))(true); \/\/ compile and execute validateAndUpdateToken() to forcefully getting new token regardless what token is at hand\n\n\n\/***** CREATE AND GET NEW CASE *****\/\n\/\/ Draft \"POST Case\" payload\nlet now = new Date().getTime() \/ 1000 | 0;\nlet sap = pm.environment.get(\"100_SupportAreaPath\");\nlet delay = 5000; \/\/ General time delay before making next request\nlet caseJson = {\n  \"SupportAreaPath\": sap,\n  \"Severity\": \"2\",\n  \"CreationChannel\": \"Web\",\n  \"Title\": \"Test \" + now,\n  \"IssueDescription\": \"This is a description of the issue.\",\n  \"SupportCountry\": \"US\",\n  \"SupportLanguage\": \"en-US\",\n  \"EntitlementInformation\": {\n    \"EntitlementId\": \"U291cmNlOkZyZWUsRnJlZUlkOjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCxMb2NhbGU6ZW4tdXMs\"\n  },\n  \"Customers\": [\n    {\n      \"CustomerId\": \"Unknown\",\n      \"CustomerIdSource\": \"Unknown\",\n      \"Contacts\": [\n        {\n            \"FirstName\": \"John\",\n            \"LastName\": \"Smith\",\n            \"Email\": \"JohnSmith@invalidCustomerEmail.com\",\n            \"Phone\": \"+123-456-7890\",\n            \"PreferredContactChannel\": \"Phone\",\n            \"IsPrimaryContact\": true\n        }\n      ]\n    }\n  ],\n  \"PartnerCaseReferences\": [\n    {\n        \"PartnerCaseId\": \"Test \" + now,\n        \"PartnerCaseState\": \"Open\",\n        \"PartnerAgentInformation\": {\n            \"FirstName\": \"Jane\",\n            \"LastName\": \"Doe\",\n            \"Email\": \"JaneDoe@invalidPartnerEmail.com\",\n            \"Phone\": \"+888-999-0000\"\n        }\n    }\n  ]\n};\n\nsetTimeout(function(){\n    let baseUrl = pm.environment.get(\"100s_200s_BaseUrl\");\n    let bearerToken = pm.environment.get(\"100s_200s_BearerToken\");\n    \n    \/\/ Prepare specs for creating a new case\n    const postRequestSpecs = {\n          url: baseUrl,\n          method: \"POST\",\n          header: {\n              \"Content-Type\": \"application\/json\", \n              \"Authorization\": \"Bearer \" + bearerToken\n          },\n          body: {\n            mode: \"raw\",\n            raw: JSON.stringify(caseJson)\n          }\n        };\n    \n    \/\/ Makes POST: creates new case\n    pm.sendRequest(postRequestSpecs, function (err, res) {\n            if(err){\n                console.log(err);\n            } else if (res.code != 201) { \/\/ No error, but request not successful\n                console.log(res);\n            } else { \/\/ Request Success\n                let caseNumber = res.json().CaseNumber;\n                pm.environment.set(\"100s_200s_CaseNumber\", caseNumber);\n                setTimeout(function(){\n                    \/\/ Makes GET: acquires casejson of the newly created case\n                    pm.sendRequest({\n                        url: baseUrl + \"\/\" + caseNumber,\n                        method: \"GET\",\n                        header: \"Authorization:Bearer \" + bearerToken\n                    });\n                }, delay); \/\/ Allocate time buffer to allow remote server to complete new case creation before our GET request\n            }\n        });\n}, delay); \/\/ Allocate time buffer to allow Postman to obtain access token before our next POST request (create case)\n\n","currentHelper":null,"helperAttributes":null,"collectionId":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","headers":"","pathVariables":[]},{"id":"579a8c28-9ed4-4a03-8266-b06a6b9b17a4","name":"200 v1 Get Case","url":"{{100s_200s_BaseUrl}}\/{{100s_200s_CaseNumber}}","description":null,"data":[],"dataMode":"raw","headerData":[{"key":"Authorization","value":"Bearer {{100s_200s_BearerToken}}"}],"method":"GET","pathVariableData":[],"queryParams":[],"auth":null,"events":[{"listen":"prerequest","script":{"id":"3560a2d2-77f6-4860-a1aa-75ed3fc3d0a7","type":"text\/javascript","exec":["eval(pm.globals.get(\"validateAndUpdateToken\"))(false); \/\/ compile and execute validateAndUpdateToken() to validate token and get new token if current one is absent or expired"]}},{"listen":"test","script":{"id":"7cf095c3-6c7a-458e-ac95-8d734a6c6569","type":"text\/javascript","exec":["\/***** REQUEST FAILURE HANDLING *****\/","let retry = parseInt(pm.environment.get(\"200_RetryGetCase\"));","","if(pm.response.code != 200) { \/\/ Request Failure","    \/\/ Note second argument is empty since \"SetNextRequest()\" won't be invoked anyways","    eval(globals.handleFailedRequest)(\"200_RetryGetCase\", \"\");","    return; \/\/ Skip rest of script below to avoid null reference error","}","","","\/***** GET PARTNER CASE REFERENCE ID GUID *****\/","let pcrs = pm.response.json().PartnerCaseReferences;","let partnerId = pm.environment.get(\"020_ClientId\");","","for (i = 0; i < pcrs.length; i++) { ","    if(pcrs[i].PartnerId == partnerId)","        pm.environment.set(\"110_PartnerCaseReferenceIdGuid\", pcrs[i].id);","}","","","\/***** GET DEFAULT CUSTOMER ID GUID *****\/","let defaultCustomer = pm.response.json().Customers[0];","","if(defaultCustomer)","    pm.environment.set(\"140_DefaultCustomerIdGuid\", defaultCustomer.id);","","","\/***** GET NEWEST CONTACT ID GUID *****\/","let contacts = pm.response.json().Customers[0].Contacts;","let newestDate = 0;","let thisDate = 0;","let indexOfNewestDate = 0;","","for (j = 0; j < contacts.length; j++) {","    thisDate = Date.parse(contacts[j].CreatedOn);","    ","    if(thisDate > newestDate){","        indexOfNewestDate = j;","        newestDate = thisDate;","    }","}","","pm.environment.set(\"145_NewestContactIdGuid\", contacts[indexOfNewestDate].id);",""]}}],"folder":"3d1eadea-4a32-47ee-b8d9-24545112f994","preRequestScript":"eval(pm.globals.get(\"validateAndUpdateToken\"))(false); \/\/ compile and execute validateAndUpdateToken() to validate token and get new token if current one is absent or expired","tests":"\/***** REQUEST FAILURE HANDLING *****\/\nlet retry = parseInt(pm.environment.get(\"200_RetryGetCase\"));\n\nif(pm.response.code != 200) { \/\/ Request Failure\n    \/\/ Note second argument is empty since \"SetNextRequest()\" won't be invoked anyways\n    eval(globals.handleFailedRequest)(\"200_RetryGetCase\", \"\");\n    return; \/\/ Skip rest of script below to avoid null reference error\n}\n\n\n\/***** GET PARTNER CASE REFERENCE ID GUID *****\/\nlet pcrs = pm.response.json().PartnerCaseReferences;\nlet partnerId = pm.environment.get(\"020_ClientId\");\n\nfor (i = 0; i < pcrs.length; i++) { \n    if(pcrs[i].PartnerId == partnerId)\n        pm.environment.set(\"110_PartnerCaseReferenceIdGuid\", pcrs[i].id);\n}\n\n\n\/***** GET DEFAULT CUSTOMER ID GUID *****\/\nlet defaultCustomer = pm.response.json().Customers[0];\n\nif(defaultCustomer)\n    pm.environment.set(\"140_DefaultCustomerIdGuid\", defaultCustomer.id);\n\n\n\/***** GET NEWEST CONTACT ID GUID *****\/\nlet contacts = pm.response.json().Customers[0].Contacts;\nlet newestDate = 0;\nlet thisDate = 0;\nlet indexOfNewestDate = 0;\n\nfor (j = 0; j < contacts.length; j++) {\n    thisDate = Date.parse(contacts[j].CreatedOn);\n    \n    if(thisDate > newestDate){\n        indexOfNewestDate = j;\n        newestDate = thisDate;\n    }\n}\n\npm.environment.set(\"145_NewestContactIdGuid\", contacts[indexOfNewestDate].id);\n","currentHelper":null,"helperAttributes":null,"collectionId":"6f8223d4-497c-4d0f-8df4-b7a92ac208b5","rawModeData":"{\r\n  \"Email\": \"test@gmail.com\",\r\n  \"FirstName\": \"Aaron\",\r\n  \"IsPrimaryContact\": true,\r\n  \"LastName\": \"Koller\",\r\n  \"Phone\": \"123-123-1234\",\r\n}","headers":"Authorization: Bearer {{100s_200s_BearerToken}}\n","pathVariables":[]}]}
